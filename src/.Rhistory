#' @useDynLib rome, .registration = TRUE, .fixes = "C_"
#' @useDynLib rome ecd_huber
#' @export rome
#'
#' @examples
rome <- function(x, y, method = c("huber"), weights=NULL,
delta = NULL,
nlambda=100, lambda.min = 0.05, lambda = NULL,
preprocess = c("none"),
centering = FALSE,
max.iter = 100, tolerance = 1e-6,
intercept = FALSE){
# ------------------------------------------- #
# Needs to be deleted:
dyn.load("D:/High-dimensional time series/Exact coordinate descent/rome/scr/rome.dll")
# ------------------------------------------- #
# Input check:
method <- match.arg(method)
preprocess <- match.arg(preprocess)
# screen <- match.arg(screen)
if (missing(lambda) && nlambda < 2) {
stop("nlambda (number of lambdas) should be at least 2")
}
call <- match.call()
# ------------------------------------------- #
# Include a column for an intercept & weights & threshold
intcpt <- 0
n <- dim(x)[1]
if (intercept == TRUE){
XX <- cbind(rep(1,n), x)
intcpt <- 1
}else{
XX <- x
}
p <- dim(XX)[2]
if (is.null(weights)){
ww <- rep(1,n)
}else{
ww <- weights
}
if (is.null(delta)){
del <- 1.5
}else{
del <- delta
}
# ------------------------------------------- #
# centering
shift <- 0
if (centering == TRUE){
if (method == "huber") {
if(gamma > sd(y)) {
shift <- mean(y)
}else {
shift <- median(y)
}
}
}
yy <- y - shift
# ------------------------------------------- #
# Flag for user-supplied lambdas
user <- 0
if (is.null(lambda)) {
lambda <- double(nlambda)
} else {
nlambda <- length(lambda)
user <- 1
}
# ------------------------------------------- #
# Flags for preprocessing and screening
ppflag <- switch(preprocess, standardize = 1L, rescale = 2L, none = 0L)
# scrflag <- switch(screen, SR = 1L, none = 0L)
# ------------------------------------------- #
# Fitting
if (method == "huber") {
fit <- .C("ecd_huber",
double(p*nlambda),
integer(nlambda),
as.double(lambda),
as.double(XX),
as.double(yy),
as.double(ww),
as.double(del),
as.double(tolerance),
as.double(lambda.min),
as.integer(nlambda),
as.integer(n),
as.integer(p),
as.integer(ppflag),
as.integer(max.iter),
as.integer(user) )
}
beta <- matrix(fit[[1]], nrow=p)
iter <- fit[[2]]
lambda <- fit[[3]]
# ------------------------------------------- #
# Get back intercept, if exists
if (intercept == TRUE){
beta[1,] <- beta[1,] + shift
}
# ------------------------------------------- #
# Names
vnames <- colnames(X)
if (intercept == TRUE){
if (is.null(vnames)) {
vnames <- paste0("V",seq(p-1))
}
vnames <- c("(Intercept)", vnames)
}else{
if (is.null(vnames)) {
vnames <- paste0("V",seq(p))
}
}
dimnames(beta) <- list(vnames, paste0("L", 1:length(lambda)))
# ------------------------------------------- #
# Output
structure(list(call = call,
beta = beta,
iter = iter,
lambda = lambda,
delta = delta,
method = method),
class = "rome")
}
rome(x,y,method="huber",weights=NULL,delta=1.5,preprocess="none",
nlambda=100, lambda.min = 0.05, lambda = NULL,tolerance = 1e-6,
max.iter = 100,
centering = FALSE,intercept = FALSE)
getDLLRegisteredRoutines("rome")
u <- seq(-5,5,0.1)
loss <- derv <- array(NA,c(length(u),7))
tau1 <- 1; tau2 <- 3;
for (i in 1:length(u)){
loss[i,1] <- u[i]^2
derv[i,1] <- u[i]
if (abs(u[i])<=tau1){
loss[i,2] <- 0.5*u[i]^2
derv[i,2] <- u[i]
}else{
loss[i,2] <- tau1*abs(u[i]) - 0.5*tau1^2
derv[i,2] <- tau1*sign(u[i])
}
if (abs(u[i])<=tau2){
loss[i,3] <- 0.5*u[i]^2
derv[i,3] <- u[i]
}else{
loss[i,3] <- tau2*abs(u[i]) - 0.5*tau2^2
derv[i,3] <- tau2*sign(u[i])
}
if (abs(u[i])<=tau1){
loss[i,4] <- tau1^2/6*(1-(1-u[i]^2/tau1^2)^3)
derv[i,4] <- u[i]*(1-u[i]^2/tau1)^2
}else{
loss[i,4] <- tau1^2/6
derv[i,4] <- 0
}
if (abs(u[i])<=tau2){
loss[i,5] <- tau2^2/6*(1-(1-u[i]^2/tau2^2)^3)
derv[i,5] <- u[i]*(1-u[i]^2/tau2)^2
}else{
loss[i,5] <- tau2^2/6
derv[i,5] <- 0
}
loss[i,6] <- tau1^2/2*log(1+u[i]^2/tau1^2)
derv[i,6] <- u[i]/(1+u[i]^2/tau1^2)
loss[i,7] <- tau2^2/2*log(1+u[i]^2/tau2^2)
derv[i,7] <- u[i]/(1+u[i]^2/tau2^2)
}
plot(u,loss[,1],type='l',ylab='y',
main="loss functions",col="green",lty=3,lwd=2)
u <- seq(-5,5,0.1)
loss <- derv <- array(NA,c(length(u),7))
tau1 <- 1; tau2 <- 3;
for (i in 1:length(u)){
loss[i,1] <- u[i]^2
derv[i,1] <- u[i]
if (abs(u[i])<=tau1){
loss[i,2] <- 0.5*u[i]^2
derv[i,2] <- u[i]
}else{
loss[i,2] <- tau1*abs(u[i]) - 0.5*tau1^2
derv[i,2] <- tau1*sign(u[i])
}
if (abs(u[i])<=tau2){
loss[i,3] <- 0.5*u[i]^2
derv[i,3] <- u[i]
}else{
loss[i,3] <- tau2*abs(u[i]) - 0.5*tau2^2
derv[i,3] <- tau2*sign(u[i])
}
if (abs(u[i])<=tau1){
loss[i,4] <- tau1^2/6*(1-(1-u[i]^2/tau1^2)^3)
derv[i,4] <- u[i]*(1-u[i]^2/tau1)^2
}else{
loss[i,4] <- tau1^2/6
derv[i,4] <- 0
}
if (abs(u[i])<=tau2){
loss[i,5] <- tau2^2/6*(1-(1-u[i]^2/tau2^2)^3)
derv[i,5] <- u[i]*(1-u[i]^2/tau2)^2
}else{
loss[i,5] <- tau2^2/6
derv[i,5] <- 0
}
loss[i,6] <- tau1^2/2*log(1+u[i]^2/tau1^2)
derv[i,6] <- u[i]/(1+u[i]^2/tau1^2)
loss[i,7] <- tau2^2/2*log(1+u[i]^2/tau2^2)
derv[i,7] <- u[i]/(1+u[i]^2/tau2^2)
}
plot(u,loss[,1],type='l',ylab='y',
main="loss functions",col="green",lty=3,lwd=2)
u <- seq(-5,5,0.1)
loss <- derv <- array(NA,c(length(u),7))
tau1 <- 1; tau2 <- 3;
for (i in 1:length(u)){
loss[i,1] <- u[i]^2
derv[i,1] <- u[i]
if (abs(u[i])<=tau1){
loss[i,2] <- 0.5*u[i]^2
derv[i,2] <- u[i]
}else{
loss[i,2] <- tau1*abs(u[i]) - 0.5*tau1^2
derv[i,2] <- tau1*sign(u[i])
}
if (abs(u[i])<=tau2){
loss[i,3] <- 0.5*u[i]^2
derv[i,3] <- u[i]
}else{
loss[i,3] <- tau2*abs(u[i]) - 0.5*tau2^2
derv[i,3] <- tau2*sign(u[i])
}
if (abs(u[i])<=tau1){
loss[i,4] <- tau1^2/6*(1-(1-u[i]^2/tau1^2)^3)
derv[i,4] <- u[i]*(1-u[i]^2/tau1)^2
}else{
loss[i,4] <- tau1^2/6
derv[i,4] <- 0
}
if (abs(u[i])<=tau2){
loss[i,5] <- tau2^2/6*(1-(1-u[i]^2/tau2^2)^3)
derv[i,5] <- u[i]*(1-u[i]^2/tau2)^2
}else{
loss[i,5] <- tau2^2/6
derv[i,5] <- 0
}
loss[i,6] <- tau1^2/2*log(1+u[i]^2/tau1^2)
derv[i,6] <- u[i]/(1+u[i]^2/tau1^2)
loss[i,7] <- tau2^2/2*log(1+u[i]^2/tau2^2)
derv[i,7] <- u[i]/(1+u[i]^2/tau2^2)
}
plot(u,loss[,1],type='l',ylab='y',
main="loss functions",col="green",lty=3,lwd=2)
lines(u,loss[,2],col="black",lty=1,lwd=2)
lines(u,loss[,3],col="black",lty=2,lwd=2)
lines(u,loss[,4],col="red",lty=1,lwd=2)
lines(u,loss[,5],col="red",lty=2,lwd=2)
lines(u,loss[,6],col="blue",lty=1,lwd=2)
lines(u,loss[,7],col="blue",lty=2,lwd=2)
legend("topright",
legend=c("l2","Huber,tau=1","Huber,tau=3",
"Tukey,tau=1", "Tukey,tau=3", "Cauchy,tau=1", "Cauchy,tau=3"),
col=c("green", "black", "black", "red", "red", "blue", "blue"),
lty=c(3, 1, 2, 1, 2, 1, 2), lwd=2, bty="n")
plot(u,derv[,1],type='l',ylab='y',ylim=c(-12,12),
main="derivatives",col="green",lty=3,lwd=2)
lines(u,derv[,2],col="black",lty=1,lwd=2)
lines(u,derv[,3],col="black",lty=2,lwd=2)
lines(u,derv[,4],col="red",lty=1,lwd=2)
lines(u,derv[,5],col="red",lty=2,lwd=2)
lines(u,derv[,6],col="blue",lty=1,lwd=2)
lines(u,derv[,7],col="blue",lty=2,lwd=2)
legend("topright",
legend=c("l2","Huber,tau=1","Huber,tau=3",
"Tukey,tau=1", "Tukey,tau=3", "Cauchy,tau=1", "Cauchy,tau=3"),
col=c("green", "black", "black", "red", "red", "blue", "blue"),
lty=c(3, 1, 2, 1, 2, 1, 2), lwd=2, bty="n")
# plot(u,derv[,1],type='l',ylab='y',ylim=c(-3,3),
#      main="derivatives",col="green",lty=3,lwd=2)
# lines(u,derv[,4],col="red",lty=1,lwd=2)
# lines(u,derv[,5],col="red",lty=2,lwd=2)
# abline(h=0,col="green",lty=1)
# abline(v=0,col="green",lty=1)
plot(u,derv[,1],type='l',ylab='y',ylim=c(-3,3),
main="derivatives",col="green",lty=3,lwd=2)
lines(u,derv[,4],col="red",lty=1,lwd=2)
lines(u,derv[,5],col="red",lty=2,lwd=2)
abline(h=0,col="green",lty=1)
abline(v=0,col="green",lty=1)
plot(u,derv[,1],type='l',ylab='y',ylim=c(-3,3),
main="derivatives",col="green",lty=3,lwd=2)
lines(u,derv[,6],col="blue",lty=1,lwd=2)
lines(u,derv[,7],col="blue",lty=2,lwd=2)
abline(h=0,col="green",lty=1)
abline(v=0,col="green",lty=1)
x <- seq(-5,5,by=0.1)
plot(x,x/(1+x^2),type="l")
abline(v=c(-1,1))
# Huber:
huber_L <- function(u, tau){
return(ifelse(abs(u) <= tau, u^2/2, tau*abs(u) - tau^2/2))
}
huber_dL <- function(u, tau){
return(ifelse(abs(u) <= tau, u, tau*sign(u)))
}
# Cauchy:
cauchy_L <- function(u, tau){
return(tau^2/2*log(1+u^2/tau^2))
}
cauchy_dL <- function(u, tau){
return(u/(1+u^2/tau^2))
}
cauchy_ddL <- function(u, tau){
return((1-u^2/tau^2)/(1+u^2/tau^2)^2)
}
# Tukey:
tukey_L <- function(u, tau){
return(ifelse(abs(u)<=tau,(tau^2/6*(1-(1-u^2/tau^2)^3)),(tau^2/6)))
}
tukey_dL <- function(u, tau){
return(ifelse(abs(u)<=tau,(u*(1-u^2/tau^2)^2),0))
}
tukey_ddL <- function(u, tau){
return(ifelse(abs(u)<=tau,((1-u^2/tau^2)*(1-5*u^2/tau^2)),0))
}
set.seed(123)
n <- 10;
tau1 <- 0.1
tau2 <- 1
x <- sort(unique(round(runif(n),2)))
n <- length(x)
print(x)
cseq <- seq(x[1]-1, x[n]+1, by = 0.01)
dat_hub_tau1 <- dat_hub_tau2 <-array(0, c(length(cseq), 3))
dat_orcl_tau1 <- dat_orcl_tau2 <-array(0, c(length(cseq), 4))
colnames(dat_hub_tau1) <- colnames(dat_hub_tau2)  <- c("c", "f(c)", "f'(c)")
colnames(dat_orcl_tau1) <- colnames(dat_orcl_tau2)  <- c("c", "f(c)", "f'(c)", "f''(c)")
dat_hub_tau1[,1] <- dat_hub_tau2[,1] <- cseq
dat_orcl_tau1[,1] <- dat_orcl_tau2[,1] <- cseq
for (i in 1:length(cseq)){
tmp1 <- 0; tmp2 <- 0; tmp3 <- 0; tmp4 <- 0; tmp5 <- 0; tmp6 <- 0
hub_tmp1 <- 0; hub_tmp2 <- 0; hub_tmp3 <- 0; hub_tmp4 <- 0
for (j in 1:n){
hub_tmp1 <- hub_tmp1 + huber_L(cseq[i] - x[j], tau1)
hub_tmp2 <- hub_tmp2 + huber_dL(cseq[i]-x[j], tau1)
hub_tmp3 <- hub_tmp3 + huber_L(cseq[i] - x[j], tau2)
hub_tmp4 <- hub_tmp4 + huber_dL(cseq[i]-x[j], tau2)
# tmp1 <- tmp1 + cauchy_L(cseq[i] - x[j], tau1)
# tmp2 <- tmp2 + cauchy_dL(cseq[i]-x[j], tau1)
# tmp3 <- tmp3 + cauchy_ddL(cseq[i]-x[j], tau1)
# tmp4 <- tmp4 + cauchy_L(cseq[i] - x[j], tau2)
# tmp5 <- tmp5 + cauchy_dL(cseq[i]-x[j], tau2)
# tmp6 <- tmp6 + cauchy_ddL(cseq[i]-x[j], tau2)
tmp1 <- tmp1 + tukey_L(cseq[i] - x[j], tau1)
tmp2 <- tmp2 + tukey_dL(cseq[i]-x[j], tau1)
tmp3 <- tmp3 + tukey_ddL(cseq[i]-x[j], tau1)
tmp4 <- tmp4 + tukey_L(cseq[i] - x[j], tau2)
tmp5 <- tmp5 + tukey_dL(cseq[i]-x[j], tau2)
tmp6 <- tmp6 + tukey_ddL(cseq[i]-x[j], tau2)
}
dat_hub_tau1[i,2:3] <- c(hub_tmp1, hub_tmp2)
dat_hub_tau2[i,2:3] <- c(hub_tmp3, hub_tmp4)
dat_orcl_tau1[i,2:4] <- c(tmp1, tmp2, tmp3)
dat_orcl_tau2[i,2:4] <- c(tmp4, tmp5, tmp6)
}
cseq <- seq(x[1]-1, x[n]+1, by = 0.01)
dat_hub_tau1 <- dat_hub_tau2 <-array(0, c(length(cseq), 3))
dat_orcl_tau1 <- dat_orcl_tau2 <-array(0, c(length(cseq), 4))
colnames(dat_hub_tau1) <- colnames(dat_hub_tau2)  <- c("c", "f(c)", "f'(c)")
colnames(dat_orcl_tau1) <- colnames(dat_orcl_tau2)  <- c("c", "f(c)", "f'(c)", "f''(c)")
dat_hub_tau1[,1] <- dat_hub_tau2[,1] <- cseq
dat_orcl_tau1[,1] <- dat_orcl_tau2[,1] <- cseq
for (i in 1:length(cseq)){
tmp1 <- 0; tmp2 <- 0; tmp3 <- 0; tmp4 <- 0; tmp5 <- 0; tmp6 <- 0
hub_tmp1 <- 0; hub_tmp2 <- 0; hub_tmp3 <- 0; hub_tmp4 <- 0
for (j in 1:n){
hub_tmp1 <- hub_tmp1 + huber_L(cseq[i] - x[j], tau1)
hub_tmp2 <- hub_tmp2 + huber_dL(cseq[i]-x[j], tau1)
hub_tmp3 <- hub_tmp3 + huber_L(cseq[i] - x[j], tau2)
hub_tmp4 <- hub_tmp4 + huber_dL(cseq[i]-x[j], tau2)
tmp1 <- tmp1 + cauchy_L(cseq[i] - x[j], tau1)
tmp2 <- tmp2 + cauchy_dL(cseq[i]-x[j], tau1)
tmp3 <- tmp3 + cauchy_ddL(cseq[i]-x[j], tau1)
tmp4 <- tmp4 + cauchy_L(cseq[i] - x[j], tau2)
tmp5 <- tmp5 + cauchy_dL(cseq[i]-x[j], tau2)
tmp6 <- tmp6 + cauchy_ddL(cseq[i]-x[j], tau2)
# tmp1 <- tmp1 + tukey_L(cseq[i] - x[j], tau1)
# tmp2 <- tmp2 + tukey_dL(cseq[i]-x[j], tau1)
# tmp3 <- tmp3 + tukey_ddL(cseq[i]-x[j], tau1)
# tmp4 <- tmp4 + tukey_L(cseq[i] - x[j], tau2)
# tmp5 <- tmp5 + tukey_dL(cseq[i]-x[j], tau2)
# tmp6 <- tmp6 + tukey_ddL(cseq[i]-x[j], tau2)
}
dat_hub_tau1[i,2:3] <- c(hub_tmp1, hub_tmp2)
dat_hub_tau2[i,2:3] <- c(hub_tmp3, hub_tmp4)
dat_orcl_tau1[i,2:4] <- c(tmp1, tmp2, tmp3)
dat_orcl_tau2[i,2:4] <- c(tmp4, tmp5, tmp6)
}
plot(cseq,dat_orcl_tau1[,2],type='l')
# abline(v=cseq[which.min(dat_hub_tau1[,2])],col="red")
abline(v=cseq[c(FALSE,sign(dat_orcl_tau1[-length(cseq),4]*dat_orcl_tau1[-1,4]) == -1)])
j_tau1 = which.min(dat_orcl_tau1[,2])
print(dat_orcl_tau1[(j_tau1-2):(j_tau1+2),])
plot(cseq,dat_orcl_tau1[,3],type='l')
# abline(v=cseq[which.min(dat_hub_tau1[,2])],col="red")
abline(v=cseq[c(FALSE,sign(dat_orcl_tau1[-length(cseq),4]*dat_orcl_tau1[-1,4]) == -1)])
j_tau1 = which.min(dat_orcl_tau1[,2])
print(dat_orcl_tau1[(j_tau1-2):(j_tau1+2),])
x <- seq(-5,5,by=0.1)
plot(x,x/(1+x^2),type="l")
abline(v=c(-1,1))
plot(cseq,dat_hubl_tau1[,2],type='l')
plot(cseq,dat_hub_tau1[,2],type='l')
plot(cseq,dat_hub_tau1[,3],type='l')
plot(cseq,dat_orcl_tau1[,3],type='l')
abline(h=0)
plot(cseq,dat_orcl_tau1[,2],type='l')
cseq[c(FALSE,sign(dat_orcl_tau1[-length(cseq),3]*dat_orcl_tau1[-1,3]) == -1)]
j_tau1 = which.min(dat_orcl_tau1[,2])
print(dat_orcl_tau1[(j_tau1-2):(j_tau1+2),])
cseq <- seq(x[1]-1, x[n]+1, by = 0.01)
dat_hub_tau1 <- dat_hub_tau2 <-array(0, c(length(cseq), 3))
dat_orcl_tau1 <- dat_orcl_tau2 <-array(0, c(length(cseq), 4))
colnames(dat_hub_tau1) <- colnames(dat_hub_tau2)  <- c("c", "f(c)", "f'(c)")
colnames(dat_orcl_tau1) <- colnames(dat_orcl_tau2)  <- c("c", "f(c)", "f'(c)", "f''(c)")
dat_hub_tau1[,1] <- dat_hub_tau2[,1] <- cseq
dat_orcl_tau1[,1] <- dat_orcl_tau2[,1] <- cseq
for (i in 1:length(cseq)){
tmp1 <- 0; tmp2 <- 0; tmp3 <- 0; tmp4 <- 0; tmp5 <- 0; tmp6 <- 0
hub_tmp1 <- 0; hub_tmp2 <- 0; hub_tmp3 <- 0; hub_tmp4 <- 0
for (j in 1:n){
hub_tmp1 <- hub_tmp1 + huber_L(cseq[i] - x[j], tau1)
hub_tmp2 <- hub_tmp2 + huber_dL(cseq[i]-x[j], tau1)
hub_tmp3 <- hub_tmp3 + huber_L(cseq[i] - x[j], tau2)
hub_tmp4 <- hub_tmp4 + huber_dL(cseq[i]-x[j], tau2)
# tmp1 <- tmp1 + cauchy_L(cseq[i] - x[j], tau1)
# tmp2 <- tmp2 + cauchy_dL(cseq[i]-x[j], tau1)
# tmp3 <- tmp3 + cauchy_ddL(cseq[i]-x[j], tau1)
# tmp4 <- tmp4 + cauchy_L(cseq[i] - x[j], tau2)
# tmp5 <- tmp5 + cauchy_dL(cseq[i]-x[j], tau2)
# tmp6 <- tmp6 + cauchy_ddL(cseq[i]-x[j], tau2)
tmp1 <- tmp1 + tukey_L(cseq[i] - x[j], tau1)
tmp2 <- tmp2 + tukey_dL(cseq[i]-x[j], tau1)
tmp3 <- tmp3 + tukey_ddL(cseq[i]-x[j], tau1)
tmp4 <- tmp4 + tukey_L(cseq[i] - x[j], tau2)
tmp5 <- tmp5 + tukey_dL(cseq[i]-x[j], tau2)
tmp6 <- tmp6 + tukey_ddL(cseq[i]-x[j], tau2)
}
dat_hub_tau1[i,2:3] <- c(hub_tmp1, hub_tmp2)
dat_hub_tau2[i,2:3] <- c(hub_tmp3, hub_tmp4)
dat_orcl_tau1[i,2:4] <- c(tmp1, tmp2, tmp3)
dat_orcl_tau2[i,2:4] <- c(tmp4, tmp5, tmp6)
}
plot(cseq,dat_orcl_tau1[,2],type='l')
plot(cseq,dat_orcl_tau1[,3],type='l')
set.seed(123)
n <- 10;
tau1 <- 0.1
tau2 <- 1
x <- sort(unique(round(runif(n),2)))
n <- length(x)
print(x)
cseq <- seq(x[1]-1, x[n]+1, by = 0.01)
dat_hub_tau1 <- dat_hub_tau2 <-array(0, c(length(cseq), 3))
dat_orcl_tau1 <- dat_orcl_tau2 <-array(0, c(length(cseq), 4))
colnames(dat_hub_tau1) <- colnames(dat_hub_tau2)  <- c("c", "f(c)", "f'(c)")
colnames(dat_orcl_tau1) <- colnames(dat_orcl_tau2)  <- c("c", "f(c)", "f'(c)", "f''(c)")
dat_hub_tau1[,1] <- dat_hub_tau2[,1] <- cseq
dat_orcl_tau1[,1] <- dat_orcl_tau2[,1] <- cseq
for (i in 1:length(cseq)){
tmp1 <- 0; tmp2 <- 0; tmp3 <- 0; tmp4 <- 0; tmp5 <- 0; tmp6 <- 0
hub_tmp1 <- 0; hub_tmp2 <- 0; hub_tmp3 <- 0; hub_tmp4 <- 0
for (j in 1:n){
hub_tmp1 <- hub_tmp1 + huber_L(cseq[i] - x[j], tau1)
hub_tmp2 <- hub_tmp2 + huber_dL(cseq[i]-x[j], tau1)
hub_tmp3 <- hub_tmp3 + huber_L(cseq[i] - x[j], tau2)
hub_tmp4 <- hub_tmp4 + huber_dL(cseq[i]-x[j], tau2)
# tmp1 <- tmp1 + cauchy_L(cseq[i] - x[j], tau1)
# tmp2 <- tmp2 + cauchy_dL(cseq[i]-x[j], tau1)
# tmp3 <- tmp3 + cauchy_ddL(cseq[i]-x[j], tau1)
# tmp4 <- tmp4 + cauchy_L(cseq[i] - x[j], tau2)
# tmp5 <- tmp5 + cauchy_dL(cseq[i]-x[j], tau2)
# tmp6 <- tmp6 + cauchy_ddL(cseq[i]-x[j], tau2)
tmp1 <- tmp1 + tukey_L(cseq[i] - x[j], tau1)
tmp2 <- tmp2 + tukey_dL(cseq[i]-x[j], tau1)
tmp3 <- tmp3 + tukey_ddL(cseq[i]-x[j], tau1)
tmp4 <- tmp4 + tukey_L(cseq[i] - x[j], tau2)
tmp5 <- tmp5 + tukey_dL(cseq[i]-x[j], tau2)
tmp6 <- tmp6 + tukey_ddL(cseq[i]-x[j], tau2)
}
dat_hub_tau1[i,2:3] <- c(hub_tmp1, hub_tmp2)
dat_hub_tau2[i,2:3] <- c(hub_tmp3, hub_tmp4)
dat_orcl_tau1[i,2:4] <- c(tmp1, tmp2, tmp3)
dat_orcl_tau2[i,2:4] <- c(tmp4, tmp5, tmp6)
}
plot(cseq,dat_orcl_tau2[,2],type='l')
# abline(v=cseq[which.min(dat_hub_tau2[,2])],col="red")
abline(v=cseq[c(FALSE,sign(dat_orcl_tau2[-length(cseq),4]*dat_orcl_tau2[-1,4]) == -1)])
plot(cseq,dat_orcl_tau2[,3],type='l')
# abline(v=cseq[which.min(dat_hub_tau2[,2])],col="red")
abline(v=cseq[c(FALSE,sign(dat_orcl_tau2[-length(cseq),4]*dat_orcl_tau2[-1,4]) == -1)])
plot(cseq,dat_orcl_tau1[,3],type='l')
# abline(v=cseq[which.min(dat_hub_tau1[,2])],col="red")
abline(v=cseq[c(FALSE,sign(dat_orcl_tau1[-length(cseq),4]*dat_orcl_tau1[-1,4]) == -1)])
j_tau1 = which.min(dat_orcl_tau1[,2])
print(dat_orcl_tau1[(j_tau1-2):(j_tau1+2),])
plot(cseq,dat_orcl_tau1[,2],type='l')
plot(cseq,dat_orcl_tau1[,3],type='l')
abline(v=cseq[c(FALSE,sign(dat_orcl_tau1[-length(cseq),4]*dat_orcl_tau1[-1,4]) == -1)])
plot(cseq,dat_orcl_tau1[,3],type='l')
abline(v=cseq[c(FALSE,sign(dat_orcl_tau1[-length(cseq),3]*dat_orcl_tau1[-1,3]) == -1)])
cseq[c(FALSE,sign(dat_orcl_tau1[-length(cseq),3]*dat_orcl_tau1[-1,3]) == -1)]
plot(cseq,dat_orcl_tau1[,2],type='l')
abline(v=cseq[which.min(dat_hub_tau1[,2])],col="red")
