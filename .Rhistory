y <- x %*% b + e
?cv.rome
library("rome")
library("mvtnorm")
library("Matrix")
source("benchmark_huber.R")
rome::cv.rome()
rome::cv.rome
# CV_rome
cv_rome <- cv.rome(x=x,y=y,FUN="rome_adaptive")
# CV_rome
cv_rome <- cv.rome(x=x,y=y,FUN="rome.adaptive")
plot(cv_rome)
library("hqreg")
?hqreg::cv.hqreg
# CV_hqreg
cv_hqreg <- cv.hqreg(X=x,y=y,FUN="hqreg_raw",type.measure="deviance")
plot(cv_hqreg)
getwd()
setwd("D:/High-dimensional time series/Exact coordinate descent/rome")
library(devtools)
library(roxygen2)
remove.packages("rome")
document()
document()
document()
load_all()
document()
document()
document()
document()
document()
load_all()
document()
document()
document()
document()
devtools::document()
devtools::document()
file.remove("NAMESPACE")
devtools::document()
file.remove("NAMESPACE")
devtools::document()
load_all()
remove.packages("rome")
########################################################################
# Final settings of Data applications
########################################################################
rm(list=ls())
library("rome")
library("hqreg")
library("mvtnorm")
library("Matrix")
source("benchmark_huber.R")
########################################################################
# Final settings of Data applications
########################################################################
rm(list=ls())
library("rome")
library("hqreg")
library("mvtnorm")
library("Matrix")
n <- 100
p <- 200
# x <- rmvnorm(n,mean=rep(0,p),sigma=diag(1,p))
rho <- 0.5
sigma = matrix(rho,p,p); diag(sigma) <- 1
# x <- rmvnorm(n,mean=rep(0,p),sigma=diag(1,p))
x <- rmvt(n,sigma=diag(1,p),df=4)
b <- c(runif(2,-10,10),rep(0,p-2))
e <- rnorm(n,0,1)
y <- x %*% b + e
# CV_rome
cv_rome <- cv.rome(x=x,y=y,FUN="rome.adaptive")
plot(cv_rome)
# CV_hqreg
cv_hqreg <- cv.hqreg(X=x,y=y,FUN="hqreg_raw",type.measure="deviance")
plot(cv_hqreg)
remove.packages("rome")
library(rome)
remove.packages("rome")
getwd()
document()
load_all()
rm(list=ls())
library("rome")
library("hqreg")
library("mvtnorm")
library("Matrix")
# source("benchmark_huber.R")
########################################################################
n <- 100
p <- 200
# x <- rmvnorm(n,mean=rep(0,p),sigma=diag(1,p))
rho <- 0.5
sigma = matrix(rho,p,p); diag(sigma) <- 1
# x <- rmvnorm(n,mean=rep(0,p),sigma=diag(1,p))
x <- rmvt(n,sigma=diag(1,p),df=4)
b <- c(runif(2,-10,10),rep(0,p-2))
e <- rnorm(n,0,1)
y <- x %*% b + e
# CV_hqreg
cv_hqreg <- cv.hqreg(X=x,y=y,FUN="hqreg_raw",type.measure="deviance")
plot(cv_hqreg)
# source("benchmark_huber.R")
########################################################################
n <- 100
p <- 200
# x <- rmvnorm(n,mean=rep(0,p),sigma=diag(1,p))
rho <- 0.5
sigma = matrix(rho,p,p); diag(sigma) <- 1
# x <- rmvnorm(n,mean=rep(0,p),sigma=diag(1,p))
x <- rmvt(n,sigma=diag(1,p),df=4)
b <- c(runif(2,-10,10),rep(0,p-2))
e <- rnorm(n,0,1)
y <- x %*% b + e
# CV_hqreg
cv_hqreg <- cv.hqreg(X=x,y=y,FUN="hqreg_raw",type.measure="deviance")
plot(cv_hqreg)
# CV_rome
cv_rome <- cv.rome(x=x,y=y,FUN="rome.adaptive")
plot(cv_rome)
remove.packages("rome")
document()
load_all()
remove.packages("rome")
rm(list=ls())
library("rome")
library("hqreg")
library("mvtnorm")
library("Matrix")
# source("benchmark_huber.R")
########################################################################
n <- 100
p <- 200
# x <- rmvnorm(n,mean=rep(0,p),sigma=diag(1,p))
rho <- 0.5
sigma = matrix(rho,p,p); diag(sigma) <- 1
# x <- rmvnorm(n,mean=rep(0,p),sigma=diag(1,p))
x <- rmvt(n,sigma=diag(1,p),df=4)
b <- c(runif(2,-10,10),rep(0,p-2))
e <- rnorm(n,0,1)
y <- x %*% b + e
# CV_hqreg
cv_hqreg <- cv.hqreg(X=x,y=y,FUN="hqreg_raw",type.measure="deviance")
plot(cv_hqreg)
# CV_rome
cv_rome <- cv.rome(x=x,y=y,FUN="rome.adaptive")
plot(cv_rome)
?cv.hqreg
load("D:/High-dimensional time series/Exact coordinate descent/glass.RData")
########################################################################
load("./glass.RData")
getwd()
setwd("D:/High-dimensional time series/Exact coordinate descent")
########################################################################
load("./glass.RData")
500-15+1
x <- x[,15:500]
dim(x)
matplot(x)
matplot(t(x))
library("superheat")
dim(x%*%t(x))
dim( x %*% t(x) )
dim( t(x) %*% x )
x
dim(x)
class(x)
x %*% t(x)
as.matrix(x) %*% t(as.matrix(x))
dim(as.matrix(x) %*% t(as.matrix(x)))
n <- dim(x)[1]
p <- dim(x)[2]
superheat(as.matrix(x) %*% t(as.matrix(x)))
scaled_x <- scale(x,center=TRUE,scale=TRUE)
scaled_y <- scale(y,center=TRUE,scale=TRUE)
########################################################################
load("./glass.RData")
x <- x[,15:500]
y <- y$Pbo
n <- dim(x)[1]
p <- dim(x)[2]
scaled_x <- scale(x,center=TRUE,scale=TRUE)
scaled_y <- scale(y,center=TRUE,scale=TRUE)
scale(y)
scale(t(y))
scale(as.matrix(y))
scale(as.vector(y))
y
########################################################################
load("./glass.RData")
x <- x[,15:500]
y <- y$PbO
n <- dim(x)[1]
p <- dim(x)[2]
matplot(x)
########################################################################
load("./glass.RData")
x <- x[,15:500]
y <- y$PbO
n <- dim(x)[1]
p <- dim(x)[2]
scaled_x <- scale(x,center=TRUE,scale=TRUE)
scaled_y <- scale(y,center=TRUE,scale=TRUE)
scaled_y
########################################################################
# CV_rome
cv_rome_05 <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,FUN="rome.adaptive")
plot(cv_rome_05)
########################################################################
# CV_rome
cv_rome_05 <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,type.measure="mse",FUN="rome.adaptive")
plot(cv_rome_05)
remove.packages("rome")
getwd()
setwd("D:/High-dimensional time series/Exact coordinate descent/rome")
library(devtools)
library(roxygen2)
document()
load_all()
########################################################################
# Final settings of Data applications
########################################################################
rm(list=ls())
library("superheat")
library("hqreg")
library("mvtnorm")
library("Matrix")
# source("benchmark_huber.R")
########################################################################
# # Test example:
# n <- 100
# p <- 200
# rho <- 0.5
# sigma = matrix(rho,p,p); diag(sigma) <- 1
# x <- rmvt(n,sigma=diag(1,p),df=4)
# b <- c(runif(2,-10,10),rep(0,p-2))
# e <- rnorm(n,0,1)
# y <- x %*% b + e
########################################################################
load("D:/High-dimensional time series/Exact coordinate descent/glass.RData")
x <- x[,15:500]
y <- y$PbO
n <- dim(x)[1]
p <- dim(x)[2]
scaled_x <- scale(x,center=TRUE,scale=TRUE)
scaled_y <- scale(y,center=TRUE,scale=TRUE)
########################################################################
# CV_rome
cv_rome_05_dev <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,FUN="rome.adaptive")
cv_rome_05_mse <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,type.measure='mse',FUN="rome.adaptive")
plot(cv_rome_05_mse)
remove.packages("rome")
getwd()
document()
load_all()
remove.packages("rome")
########################################################################
# Final settings of Data applications
########################################################################
rm(list=ls())
library("superheat")
library("hqreg")
library("mvtnorm")
library("Matrix")
# source("benchmark_huber.R")
########################################################################
# # Test example:
# n <- 100
# p <- 200
# rho <- 0.5
# sigma = matrix(rho,p,p); diag(sigma) <- 1
# x <- rmvt(n,sigma=diag(1,p),df=4)
# b <- c(runif(2,-10,10),rep(0,p-2))
# e <- rnorm(n,0,1)
# y <- x %*% b + e
########################################################################
load("D:/High-dimensional time series/Exact coordinate descent/glass.RData")
x <- x[,15:500]
y <- y$PbO
n <- dim(x)[1]
p <- dim(x)[2]
scaled_x <- scale(x,center=TRUE,scale=TRUE)
scaled_y <- scale(y,center=TRUE,scale=TRUE)
########################################################################
# CV_rome
cv_rome_05_dev <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,FUN="rome.adaptive")
plot(cv_rome_05_dev)
cv_rome_05_dev$type.measure
remove.packages("rome")
document()
load_all()
########################################################################
# Final settings of Data applications
########################################################################
rm(list=ls())
library("superheat")
library("hqreg")
library("mvtnorm")
library("Matrix")
# source("benchmark_huber.R")
########################################################################
# # Test example:
# n <- 100
# p <- 200
# rho <- 0.5
# sigma = matrix(rho,p,p); diag(sigma) <- 1
# x <- rmvt(n,sigma=diag(1,p),df=4)
# b <- c(runif(2,-10,10),rep(0,p-2))
# e <- rnorm(n,0,1)
# y <- x %*% b + e
########################################################################
load("D:/High-dimensional time series/Exact coordinate descent/glass.RData")
x <- x[,15:500]
y <- y$PbO
n <- dim(x)[1]
p <- dim(x)[2]
scaled_x <- scale(x,center=TRUE,scale=TRUE)
scaled_y <- scale(y,center=TRUE,scale=TRUE)
########################################################################
# CV_rome
cv_rome_05_dev <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,FUN="rome.adaptive")
plot(cv_rome_05_dev)
plot(cv_rome_05_dev)
remove.packages("rome")
document()
load_all()
########################################################################
# Final settings of Data applications
########################################################################
rm(list=ls())
library("superheat")
library("hqreg")
library("mvtnorm")
library("Matrix")
# source("benchmark_huber.R")
########################################################################
# # Test example:
# n <- 100
# p <- 200
# rho <- 0.5
# sigma = matrix(rho,p,p); diag(sigma) <- 1
# x <- rmvt(n,sigma=diag(1,p),df=4)
# b <- c(runif(2,-10,10),rep(0,p-2))
# e <- rnorm(n,0,1)
# y <- x %*% b + e
########################################################################
load("D:/High-dimensional time series/Exact coordinate descent/glass.RData")
x <- x[,15:500]
y <- y$PbO
n <- dim(x)[1]
p <- dim(x)[2]
scaled_x <- scale(x,center=TRUE,scale=TRUE)
scaled_y <- scale(y,center=TRUE,scale=TRUE)
########################################################################
# CV_rome
cv_rome_05_dev <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,FUN="rome.adaptive")
plot(cv_rome_05_dev)
cv_rome_05_mse <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,type.measure='mse',FUN="rome.adaptive")
plot(cv_rome_05_mse)
cv_rome_05_mae <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,type.measure='mae',FUN="rome.adaptive")
plot(cv_rome_05_mae)
cv_rome_05 <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,FUN="rome.adaptive")
cv_rome_10 <- cv.rome(x=scaled_x,y=scaled_y,delta=1.0,FUN="rome.adaptive")
cv_rome_15 <- cv.rome(x=scaled_x,y=scaled_y,delta=1.5,FUN="rome.adaptive")
fit_rome_05 <- rome_adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=cv_rome_05$lambda_min,
adapt=FALSE)
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=cv_rome_05$lambda_min,
adapt=FALSE)
cv_rome_05$lambda_min
scaled_x
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=cv_rome_05$lambda_min,
adapt=FALSE)
colnames(x)
vnames <- colnames(x)
list(vnames, paste0("L", 1:1))
length(0.2)
cv_rome_05$lambda_min
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=cv_rome_05$lambda_min,
adapt=FALSE)
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=c(cv_rome_05$lambda_min,0.5*cv_rome_05$lambda_min)
adapt=FALSE)
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=c(cv_rome_05$lambda_min,0.5*cv_rome_05$lambda_min),
adapt=FALSE)
fit_rome_05$beta
getwd()
document()
load_all()
remove.packages("rome")
########################################################################
# Final settings of Data applications
########################################################################
rm(list=ls())
library("superheat")
library("hqreg")
library("mvtnorm")
library("Matrix")
# source("benchmark_huber.R")
########################################################################
# # Test example:
# n <- 100
# p <- 200
# rho <- 0.5
# sigma = matrix(rho,p,p); diag(sigma) <- 1
# x <- rmvt(n,sigma=diag(1,p),df=4)
# b <- c(runif(2,-10,10),rep(0,p-2))
# e <- rnorm(n,0,1)
# y <- x %*% b + e
########################################################################
load("D:/High-dimensional time series/Exact coordinate descent/glass.RData")
x <- x[,15:500]
y <- y$PbO
n <- dim(x)[1]
p <- dim(x)[2]
scaled_x <- scale(x,center=TRUE,scale=TRUE)
scaled_y <- scale(y,center=TRUE,scale=TRUE)
########################################################################
# Full data
cv_rome_05 <- cv.rome(x=scaled_x,y=scaled_y,delta=0.5,FUN="rome.adaptive")
cv_rome_10 <- cv.rome(x=scaled_x,y=scaled_y,delta=1.0,FUN="rome.adaptive")
cv_rome_15 <- cv.rome(x=scaled_x,y=scaled_y,delta=1.5,FUN="rome.adaptive")
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=cv_rome_05$lambda_min,0.5,
adapt=FALSE)
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=cv_rome_05$lambda_min,
adapt=FALSE)
fit_rome_05
fit_rome_10 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=1.0,
lambda=cv_rome_10$lambda_min,
adapt=FALSE)
fit_rome_15 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=1.5,
lambda=cv_rome_15$lambda_min,
adapt=FALSE)
sum(fit_rome_05$beta==0)
sum(fit_rome_10$beta==0)
sum(fit_rome_15$beta==0)
plot(fit_rome_05$beta)
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=cv_rome_05$lambda_lse,
adapt=FALSE)
sum(fit_rome_05$beta==0)
cv_rome_05$lambda_lse
cv_rome_05$lambda_1se
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=cv_rome_05$lambda_1se,
adapt=FALSE)
sum(fit_rome_05$beta==0)
1
sum(fit_rome_10$beta==0)
fit_rome_05 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=0.5,
lambda=cv_rome_05$lambda_1se,
adapt=FALSE)
fit_rome_10 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=1.0,
lambda=cv_rome_10$lambda_1se,
adapt=FALSE)
fit_rome_15 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=1.5,
lambda=cv_rome_15$lambda_1se,
adapt=FALSE)
sum(fit_rome_10$beta==0)
sum(fit_rome_15$beta==0)
plot(fit_rome_05$beta)
sum(fit_rome_05$beta!=0)
sum(fit_rome_10$beta!=0)
sum(fit_rome_15$beta!=0)
cv_rome_30 <- cv.rome(x=scaled_x,y=scaled_y,delta=3.0,FUN="rome.adaptive")
fit_rome_30 <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=3.0,
lambda=cv_rome_30$lambda_1se,
adapt=FALSE)
um(fit_rome_30$beta!=0)
sum(fit_rome_30$beta!=0)
plot(fit_rome_30$beta)
sample(1:n,size=(2/3*n),replace=FALSE)
delta=0.5
iter=1
idx <- sample(1:n,size=(2/3*n),replace=FALSE)
x_train <- scaled_x[idx,]
y_train <- scaled_x[idx,]
x_test <- scaled_x[-idx,]
y_test <- scaled_x[-idx,]
cv_rome <- cv.rome(x=x_train,y=y_train,delta=delta,FUN="rome.adaptive")
fit_rome <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=delta,
lambda=cv_rome$lambda_1se,
adapt=FALSE)
dim(x_train)
idx <- sample(1:n,size=(2/3*n),replace=FALSE)
x_train <- scaled_x[idx,]
y_train <- scaled_y[idx,]
x_test <- scaled_x[-idx,]
y_test <- scaled_y[-idx,]
cv_rome <- cv.rome(x=x_train,y=y_train,delta=delta,FUN="rome.adaptive")
fit_rome <- rome.adaptive(y=scaled_y,x=scaled_x,screen="adaptive",delta=delta,
lambda=cv_rome$lambda_1se,
adapt=FALSE)
fit_rome$beta
x_test %*% fit_rome$beta
y_test - x_test %*% fit_rome$beta
norm(y_test - x_test %*% fit_rome$beta,"2")
huber_loss(y_test - x_test %*% fit_rome$beta,delta)
sum(huber_loss(y_test - x_test %*% fit_rome$beta,delta))/60
fit_rome$beta
sum(fit_rome$beta!=0)
cat(iter,"th iteration done.\n")
save(list(nz=nz,PE=PE),file=paste0("Data_appl_delta",delta,".RData"))
gewtd()
