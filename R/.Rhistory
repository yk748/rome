dyn.load("D:/High-dimensional time series/Exact coordinate descent/rome/scr/huber_cd.dll")
set.seed(123)
lambda <- 0.05;
delta <- 1.5
n <- 100
p <- 20
x <- matrix(rnorm(n*p,0,1),n,p)
e <- rnorm(n,0,1)
b <- c(10,-10,rep(0,p-2))
y <- x %*% b + e
max.iter=1e6
tol=1e-7
w=NULL
getLoadedDLLs()
n <- dim(x)[1]
p <- dim(x)[2]
if (is.null(w)){
w <- rep(1,n)
}
beta.cd <- matrix(NA,max.iter,p)
iter=1
if (iter == 1){
b.old <- b.new <- rep(0,p)
beta.cd[1,] <- b.old
}
.C(C_pg_huber, as.double(y),as.double(x[,-j]),as.double(w),
as.double(b.old[-j]), as.integer(n), as.integer(p), as.double(delta))
.C("pg_Huber_reg", as.double(y),as.double(x[,-j]),as.double(w),
as.double(b.old[-j]), as.integer(n), as.integer(p), as.double(delta))
j=1
.C("pg_Huber_reg", as.double(y),as.double(x[,-j]),as.double(w),
as.double(b.old[-j]), as.integer(n), as.integer(p), as.double(delta))
.C("pg_huber", as.double(y),as.double(x[,-j]),as.double(w),
as.double(b.old[-j]), as.integer(n), as.integer(p), as.double(delta))
getLoadedDLLs()
getLoadedDLLs()
dlls <- getLoadedDLLs()
getDLLRegisteredRoutines(dlls$base)
getDLLRegisteredRoutines(dyn.load("D:/High-dimensional time series/Exact coordinate descent/rome/scr/huber_cd.dll"))
dyn.load("D:/High-dimensional time series/Exact coordinate descent/rome/scr/huber.dll")
getLoadedDLLs()
getDLLRegisteredRoutines(dyn.load("D:/High-dimensional time series/Exact coordinate descent/rome/scr/huber.dll"))
